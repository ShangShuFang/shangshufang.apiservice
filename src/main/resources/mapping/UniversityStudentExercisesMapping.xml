<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.shangshufang.apiservice.mapper.UniversityStudentExercisesMapper">
  <resultMap id="BaseResultMap" type="com.shangshufang.apiservice.entity.UniversityStudentExercisesEntity">
    <id column="student_exercises_id" property="studentExercisesID" jdbcType="INTEGER"/>

    <result column="student_university_code" property="studentUniversityCode" jdbcType="INTEGER"/>
    <result column="student_university_name" property="studentUniversityName" jdbcType="VARCHAR"/>
    <result column="student_school_id" property="studentSchoolID" jdbcType="INTEGER"/>
    <result column="student_school_name" property="studentSchoolName" jdbcType="VARCHAR"/>
    <result column="student_id" property="studentID" jdbcType="INTEGER"/>
    <result column="student_name" property="studentName" jdbcType="VARCHAR"/>
    <result column="student_photo" property="studentPhoto" jdbcType="VARCHAR"/>
    <result column="cellphone" property="cellphone" jdbcType="VARCHAR"/>
    <result column="enrollment_year" property="enrollmentYear" jdbcType="VARCHAR"/>
    <result column="position_site" property="positionSite" jdbcType="FLOAT"/>
    <result column="ability_level" property="abilityLevel" jdbcType="VARCHAR"/>

    <result column="course_university_code" property="courseUniversityCode" jdbcType="INTEGER"/>
    <result column="course_university_name" property="courseUniversityName" jdbcType="VARCHAR"/>
    <result column="course_school_id" property="courseSchoolID" jdbcType="INTEGER"/>
    <result column="course_school_name" property="courseSchoolName" jdbcType="VARCHAR"/>
    <result column="course_id" property="courseID" jdbcType="INTEGER"/>
    <result column="course_name" property="courseName" jdbcType="VARCHAR"/>
    <result column="course_class" property="courseClass" jdbcType="INTEGER"/>

    <result column="technology_id" property="technologyID" jdbcType="INTEGER"/>
    <result column="technology_name" property="technologyName" jdbcType="VARCHAR"/>
    <result column="learning_phase_id" property="learningPhaseID" jdbcType="INTEGER"/>
    <result column="learning_phase_name" property="learningPhaseName" jdbcType="VARCHAR"/>
    <result column="knowledge_id" property="knowledgeID" jdbcType="INTEGER"/>
    <result column="knowledge_name" property="knowledgeName" jdbcType="VARCHAR"/>
    <result column="exercises_document_id" property="exercisesDocumentID" jdbcType="INTEGER"/>
    <result column="exercises_document_url" property="exercisesDocumentUrl" jdbcType="VARCHAR"/>
    <result column="exercises_answer_url" property="exercisesAnswerUrl" jdbcType="VARCHAR"/>
    <result column="source_code_git_url" property="sourceCodeGitUrl" jdbcType="VARCHAR"/>

    <result column="data_status" property="dataStatus" jdbcType="VARCHAR"/>
    <result column="data_status_text" property="dataStatusText" jdbcType="VARCHAR"/>

    <result column="reviewer_id" property="reviewerID" jdbcType="INTEGER"/>
    <result column="reviewer_name_teacher" property="reviewerNameTeacher" jdbcType="VARCHAR"/>
    <result column="reviewer_name_student" property="reviewerNameStudent" jdbcType="VARCHAR"/>
    <result column="reviewer_type" property="reviewerType" jdbcType="VARCHAR"/>
    <result column="review_time" property="reviewTime" jdbcType="TIMESTAMP"/>


    <result column="create_user" property="createUser" jdbcType="INTEGER"/>
    <result column="create_time" property="createTime" jdbcType="TIMESTAMP"/>
    <result column="update_user" property="updateUser" jdbcType="INTEGER"/>
    <result column="update_time" property="updateTime" jdbcType="TIMESTAMP"/>
  </resultMap>
  <select id="searchTotalCount" resultType="java.lang.Integer">
    SELECT
    COUNT(1) AS TotalCount
    FROM shangshufang_customer.university_student_exercises A
    INNER JOIN shangshufang_customer.course B
    ON A.course_university_code = B.university_code
    AND A.course_school_id = B.school_id
    AND A.course_id = B.course_id
    INNER JOIN shangshufang_base.technology C
    ON A.technology_id = C.technology_id
    INNER JOIN shangshufang_base.learning_phase D
    ON A.learning_phase_id = D.learning_phase_id
    INNER JOIN shangshufang_base.technology_knowledge E
    ON A.technology_id = E.technology_id
    AND A.knowledge_id = E.knowledge_id
    AND E.data_status = 'A'
    INNER JOIN shangshufang_base.technology_knowledge_exercises F
    ON A.technology_id = F.technology_id
    AND A.knowledge_id = F.knowledge_id
    AND A.exercises_document_id = F.exercises_id
    INNER JOIN shangshufang_customer.university_student g
    ON a.student_id = g.student_id
    WHERE A.course_university_code = #{courseUniversityCode,jdbcType=INTEGER}
    AND A.course_school_id = #{courseSchoolID,jdbcType=INTEGER}
    AND A.course_id = #{courseID,jdbcType=INTEGER}
    <if test="dataStatus != null">
      AND A.data_status = #{dataStatus,jdbcType=VARCHAR}
    </if>
    <if test="studentName != null">
      AND g.full_name = #{studentName,jdbcType=VARCHAR}
    </if>;
  </select>
  <select id="searchList" resultMap="BaseResultMap">
    SELECT
    A.student_exercises_id,
    A.student_university_code,
    B.university_name AS student_university_name,
    A.student_school_id,
    C.school_name AS student_school_name,
    A.student_id,
    F.full_name AS student_name,
    F.photo AS student_photo,
    F.cellphone,
    F.enrollment_year,
    IFNULL(N.ability_level, 'L0') AS ability_level,
    IFNULL(N.position_site, 0) AS position_site,
    A.course_university_code,
    D.university_name AS course_university_name,
    A.course_school_id,
    E.school_name AS course_school_name,
    A.course_id,
    G.course_name,
    A.course_class,
    A.technology_id,
    I.technology_name,
    A.learning_phase_id,
    J.learning_phase_name,
    A.knowledge_id,
    K.knowledge_name,
    A.exercises_document_id,
    H.document_url AS exercises_document_url,
    H.answer_url AS exercises_answer_url,
    A.source_code_git_url,
    A.data_status,
    CASE WHEN A.data_status = 'P' THEN '未完成'
    WHEN A.data_status = 'W' THEN '待批改'
    WHEN A.data_status = 'R' THEN '待修改'
    WHEN A.data_status = 'S' THEN '已通过'
    ELSE '未知数据状态'
    END AS data_status_text,
    M.reviewer_id,
    M.reviewer_name_teacher,
    M.reviewer_name_student,
    M.reviewer_type,
    DATE_FORMAT(M.update_time, '%Y-%m-%d %H:%i:%s') AS review_time,
    DATE_FORMAT(A.create_time, '%Y-%m-%d %H:%i:%s') AS create_time,
    DATE_FORMAT(A.update_time, '%Y-%m-%d %H:%i:%s') AS update_time
    FROM shangshufang_customer.university_student_exercises A
    INNER JOIN shangshufang_customer.university B
    ON A.student_university_code = B.university_code
    INNER JOIN shangshufang_customer.school C
    ON A.student_university_code = C.university_code
    AND A.student_school_id = C.school_id
    INNER JOIN shangshufang_customer.university D
    ON A.course_university_code = D.university_code
    INNER JOIN shangshufang_customer.school E
    ON A.course_university_code = E.university_code
    AND A.course_school_id = E.school_id
    INNER JOIN shangshufang_customer.university_student F
    ON A.student_id = F.student_id
    INNER JOIN shangshufang_customer.course G
    ON A.course_university_code = G.university_code
    AND A.course_school_id = G.school_id
    AND A.course_id = G.course_id
    INNER JOIN shangshufang_base.technology_knowledge_exercises H
    ON A.technology_id = H.technology_id
    AND A.knowledge_id = H.knowledge_id
    AND A.exercises_document_id = H.exercises_id
    INNER JOIN shangshufang_base.technology I
    ON A.technology_id = I.technology_id
    INNER JOIN shangshufang_base.learning_phase J
    ON A.learning_phase_id = J.learning_phase_id
    INNER JOIN shangshufang_base.technology_knowledge K
    ON A.technology_id = K.technology_id
    AND A.learning_phase_id = K.learning_phase_id
    AND A.knowledge_id = K.knowledge_id
    AND K.data_status = 'A'
    LEFT JOIN
    (
      SELECT
      C.student_exercises_id,
      C.reviewer_id,
      C.reviewer_type,
      D.full_name AS reviewer_name_teacher,
      E.full_name AS reviewer_name_student,
      C.update_time
      FROM
      (
        SELECT
        A.review_id,
        A.student_exercises_id,
        A.update_time,
        B.reviewer_id,
        B.reviewer_university_code,
        B.reviewer_school_id,
        B.reviewer_type
        FROM
        (
          SELECT
          student_exercises_id,
          MAX(review_id) AS review_id,
          MAX(update_time) AS update_time
          FROM shangshufang_customer.university_student_exercises_review
          GROUP BY student_exercises_id
        ) A
        INNER JOIN shangshufang_customer.university_student_exercises_review B
        ON A.review_id = B.review_id
        AND A.student_exercises_id = B.student_exercises_id
      ) C
      LEFT JOIN shangshufang_customer.university_customer D
      ON C.reviewer_university_code = D.university_code
      AND C.reviewer_school_id = D.school_id
      AND C.reviewer_id = D.customer_id
      AND C.reviewer_type = 'T'
      LEFT JOIN shangshufang_customer.university_student E
      ON C.reviewer_university_code = E.university_code
      AND C.reviewer_school_id = E.school_id
      AND C.reviewer_id = E.student_id
      AND C.reviewer_type = 'S'
    ) M
    ON A.student_exercises_id = M.student_exercises_id
    LEFT JOIN shangshufang_customer.university_student_ability_analysis N
    ON A.student_university_code = N.student_university_code
    AND A.student_school_id = N.student_school_id
    AND A.student_id = N.student_id
    WHERE A.course_university_code = #{courseUniversityCode,jdbcType=INTEGER}
    AND A.course_school_id = #{courseSchoolID,jdbcType=INTEGER}
    AND A.course_id = #{courseID,jdbcType=INTEGER}
    <if test="dataStatus != null">
      AND A.data_status = #{dataStatus,jdbcType=VARCHAR}
    </if>
    <if test="studentName != null">
      AND F.full_name = #{studentName,jdbcType=VARCHAR}
    </if>
    ORDER BY A.course_class, A.student_id, A.knowledge_id, A.exercises_document_id, A.update_time DESC
    LIMIT #{startIndex,jdbcType=INTEGER}, #{pageSize,jdbcType=INTEGER};
  </select>
  <select id="searchTotalCount4Student" resultType="java.lang.Integer">
    SELECT COUNT(1) AS total_count
    FROM shangshufang_customer.university_student_exercises a
    INNER JOIN shangshufang_customer.university_student b
    ON a.student_id = b.student_id
    WHERE a.course_id = #{courseID,jdbcType=INTEGER}
    <if test="isSelf == true">
      AND a.student_id = #{studentID,jdbcType=INTEGER}
    </if>
    <if test="isSelf == false">
      AND a.student_id != #{studentID,jdbcType=INTEGER}
    </if>
    <if test="studentName != null">
      AND b.full_name = #{studentName,jdbcType=VARCHAR}
    </if>
    <if test="dataStatus != null">
      AND a.data_status = #{dataStatus,jdbcType=VARCHAR}
    </if>;
  </select>
  <select id="searchList4Student" resultMap="BaseResultMap">
    SELECT
    A.student_exercises_id,
    A.student_university_code,
    B.university_name AS student_university_name,
    A.student_school_id,
    C.school_name AS student_school_name,
    A.student_id,
    F.full_name AS student_name,
    F.photo AS student_photo,
    F.cellphone,
    F.enrollment_year,
    IFNULL(N.ability_level, 'L0') AS ability_level,
    IFNULL(N.position_site, 0) AS position_site,
    A.course_university_code,
    D.university_name AS course_university_name,
    A.course_school_id,
    E.school_name AS course_school_name,
    A.course_id,
    G.course_name,
    A.course_class,
    A.technology_id,
    I.technology_name,
    A.learning_phase_id,
    J.learning_phase_name,
    A.knowledge_id,
    K.knowledge_name,
    A.exercises_document_id,
    H.document_url AS exercises_document_url,
    H.answer_url AS exercises_answer_url,
    A.source_code_git_url,
    A.data_status,
    CASE WHEN A.data_status = 'P' THEN '未练习'
    WHEN A.data_status = 'W' THEN '待批改'
    WHEN A.data_status = 'R' THEN '待修改'
    WHEN A.data_status = 'S' THEN '已通过'
    ELSE '未知数据状态'
    END AS data_status_text,
    M.reviewer_id,
    M.reviewer_name_teacher,
    M.reviewer_name_student,
    M.reviewer_type,
    DATE_FORMAT(M.update_time, '%Y-%m-%d %H:%i:%s') AS review_time,
    DATE_FORMAT(A.create_time, '%Y-%m-%d %H:%i:%s') AS create_time,
    DATE_FORMAT(A.update_time, '%Y-%m-%d %H:%i:%s') AS update_time
    FROM shangshufang_customer.university_student_exercises A
    INNER JOIN shangshufang_customer.university B
    ON A.student_university_code = B.university_code
    INNER JOIN shangshufang_customer.school C
    ON A.student_university_code = C.university_code
    AND A.student_school_id = C.school_id
    INNER JOIN shangshufang_customer.university D
    ON A.course_university_code = D.university_code
    INNER JOIN shangshufang_customer.school E
    ON A.course_university_code = E.university_code
    AND A.course_school_id = E.school_id
    INNER JOIN shangshufang_customer.university_student F
    ON A.student_id = F.student_id
    INNER JOIN shangshufang_customer.course G
    ON A.course_university_code = G.university_code
    AND A.course_school_id = G.school_id
    AND A.course_id = G.course_id
    INNER JOIN shangshufang_base.technology_knowledge_exercises H
    ON A.technology_id = H.technology_id
    AND A.knowledge_id = H.knowledge_id
    AND A.exercises_document_id = H.exercises_id
    INNER JOIN shangshufang_base.technology I
    ON A.technology_id = I.technology_id
    INNER JOIN shangshufang_base.learning_phase J
    ON A.learning_phase_id = J.learning_phase_id
    INNER JOIN shangshufang_base.technology_knowledge K
    ON A.technology_id = K.technology_id
    AND A.learning_phase_id = K.learning_phase_id
    AND A.knowledge_id = K.knowledge_id
    AND K.data_status = 'A'
    LEFT JOIN
    (
      SELECT
      C.student_exercises_id,
      C.reviewer_id,
      C.reviewer_type,
      D.full_name AS reviewer_name_teacher,
      E.full_name AS reviewer_name_student,
      C.update_time
      FROM
      (
        SELECT
        A.review_id,
        A.student_exercises_id,
        A.update_time,
        B.reviewer_id,
        B.reviewer_university_code,
        B.reviewer_school_id,
        B.reviewer_type
        FROM
        (
          SELECT
          student_exercises_id,
          MAX(review_id) AS review_id,
          MAX(update_time) AS update_time
          FROM shangshufang_customer.university_student_exercises_review
          GROUP BY student_exercises_id
        ) A
        INNER JOIN shangshufang_customer.university_student_exercises_review B
        ON A.review_id = B.review_id
        AND A.student_exercises_id = B.student_exercises_id
      ) C
      LEFT JOIN shangshufang_customer.university_customer D
      ON C.reviewer_university_code = D.university_code
      AND C.reviewer_school_id = D.school_id
      AND C.reviewer_id = D.customer_id
      AND C.reviewer_type = 'T'
      LEFT JOIN shangshufang_customer.university_student E
      ON C.reviewer_university_code = E.university_code
      AND C.reviewer_school_id = E.school_id
      AND C.reviewer_id = E.student_id
      AND C.reviewer_type = 'S'
    ) M
    ON A.student_exercises_id = M.student_exercises_id
    LEFT JOIN shangshufang_customer.university_student_ability_analysis N
    ON A.student_university_code = N.student_university_code
    AND A.student_school_id = N.student_school_id
    AND A.student_id = N.student_id
    WHERE A.course_id = #{courseID,jdbcType=INTEGER}
    <if test="isSelf == true">
      AND A.student_id = #{studentID,jdbcType=INTEGER}
    </if>
    <if test="isSelf == false">
      AND A.student_id != #{studentID,jdbcType=INTEGER}
    </if>
    <if test="studentName != null">
      AND F.full_name = #{studentName,jdbcType=VARCHAR}
    </if>
    <if test="dataStatus != null">
      AND A.data_status = #{dataStatus,jdbcType=VARCHAR}
    </if>
    ORDER BY A.course_class, A.knowledge_id, A.exercises_document_id, A.update_time DESC
    LIMIT #{startIndex,jdbcType=INTEGER}, #{pageSize,jdbcType=INTEGER};
  </select>

  <select id="searchTotalCount4Technology" resultType="java.lang.Integer">
    SELECT COUNT(1) AS total_count
    FROM shangshufang_customer.university_student_exercises a
    INNER JOIN shangshufang_customer.university_student b
    ON a.student_id = b.student_id
    WHERE a.technology_id = #{technologyID,jdbcType=INTEGER}
    AND a.student_university_code = #{universityCode,jdbcType=INTEGER}
    AND a.student_school_id = #{schoolID,jdbcType=INTEGER}
    AND a.student_id = #{studentID,jdbcType=INTEGER}
    <if test="dataStatus != null">
      AND a.data_status = #{dataStatus,jdbcType=VARCHAR}
    </if>;
  </select>

  <select id="searchList4Technology" resultMap="BaseResultMap">
    SELECT
      A.student_exercises_id,
      A.student_university_code,
      B.university_name AS student_university_name,
      A.student_school_id,
      C.school_name AS student_school_name,
      A.student_id,
      F.full_name AS student_name,
      F.photo AS student_photo,
      F.cellphone,
      F.enrollment_year,
      N.ability_level,
      N.position_site,
      A.course_university_code,
      D.university_name AS course_university_name,
      A.course_school_id,
      E.school_name AS course_school_name,
      A.course_id,
      G.course_name,
      A.course_class,
      A.technology_id,
      I.technology_name,
      A.learning_phase_id,
      J.learning_phase_name,
      A.knowledge_id,
      K.knowledge_name,
      A.exercises_document_id,
      H.document_url AS exercises_document_url,
      H.answer_url AS exercises_answer_url,
      A.source_code_git_url,
      A.data_status,
      CASE WHEN A.data_status = 'P' THEN '未练习'
      WHEN A.data_status = 'W' THEN '待批改'
      WHEN A.data_status = 'R' THEN '待修改'
      WHEN A.data_status = 'S' THEN '已通过'
      ELSE '未知数据状态'
      END AS data_status_text,
      M.reviewer_id,
      M.reviewer_name_teacher,
      M.reviewer_name_student,
      M.reviewer_type,
      DATE_FORMAT(M.update_time, '%Y-%m-%d %H:%i:%s') AS review_time,
      DATE_FORMAT(A.create_time, '%Y-%m-%d %H:%i:%s') AS create_time,
      DATE_FORMAT(A.update_time, '%Y-%m-%d %H:%i:%s') AS update_time
    FROM shangshufang_customer.university_student_exercises A
    INNER JOIN shangshufang_customer.university B
    ON A.student_university_code = B.university_code
    INNER JOIN shangshufang_customer.school C
    ON A.student_university_code = C.university_code
    AND A.student_school_id = C.school_id
    INNER JOIN shangshufang_customer.university D
    ON A.course_university_code = D.university_code
    INNER JOIN shangshufang_customer.school E
    ON A.course_university_code = E.university_code
    AND A.course_school_id = E.school_id
    INNER JOIN shangshufang_customer.university_student F
    ON A.student_id = F.student_id
    INNER JOIN shangshufang_customer.course G
    ON A.course_university_code = G.university_code
    AND A.course_school_id = G.school_id
    AND A.course_id = G.course_id
    INNER JOIN shangshufang_base.technology_knowledge_exercises H
    ON A.technology_id = H.technology_id
    AND A.knowledge_id = H.knowledge_id
    AND A.exercises_document_id = H.exercises_id
    INNER JOIN shangshufang_base.technology I
    ON A.technology_id = I.technology_id
    INNER JOIN shangshufang_base.learning_phase J
    ON A.learning_phase_id = J.learning_phase_id
    INNER JOIN shangshufang_base.technology_knowledge K
    ON A.technology_id = K.technology_id
    AND A.learning_phase_id = K.learning_phase_id
    AND A.knowledge_id = K.knowledge_id
    AND K.data_status = 'A'
    LEFT JOIN
    (
    SELECT
    C.student_exercises_id,
    C.reviewer_id,
    C.reviewer_type,
    D.full_name AS reviewer_name_teacher,
    E.full_name AS reviewer_name_student,
    C.update_time
    FROM
    (
    SELECT
    A.review_id,
    A.student_exercises_id,
    A.update_time,
    B.reviewer_id,
    B.reviewer_university_code,
    B.reviewer_school_id,
    B.reviewer_type
    FROM
    (
    SELECT
    student_exercises_id,
    MAX(review_id) AS review_id,
    MAX(update_time) AS update_time
    FROM shangshufang_customer.university_student_exercises_review
    GROUP BY student_exercises_id
    ) A
    INNER JOIN shangshufang_customer.university_student_exercises_review B
    ON A.review_id = B.review_id
    AND A.student_exercises_id = B.student_exercises_id
    ) C
    LEFT JOIN shangshufang_customer.university_customer D
    ON C.reviewer_university_code = D.university_code
    AND C.reviewer_school_id = D.school_id
    AND C.reviewer_id = D.customer_id
    AND C.reviewer_type = 'T'
    LEFT JOIN shangshufang_customer.university_student E
    ON C.reviewer_university_code = E.university_code
    AND C.reviewer_school_id = E.school_id
    AND C.reviewer_id = E.student_id
    AND C.reviewer_type = 'S'
    ) M
    ON A.student_exercises_id = M.student_exercises_id
    INNER JOIN shangshufang_customer.university_student_ability_analysis N
    ON A.student_id = N.student_id
    WHERE a.technology_id = #{technologyID,jdbcType=INTEGER}
    AND a.student_university_code = #{universityCode,jdbcType=INTEGER}
    AND a.student_school_id = #{schoolID,jdbcType=INTEGER}
    AND a.student_id = #{studentID,jdbcType=INTEGER}
    <if test="dataStatus != null">
      AND a.data_status = #{dataStatus,jdbcType=VARCHAR}
    </if>

    ORDER BY A.course_class, A.knowledge_id, A.exercises_document_id, A.update_time DESC
    LIMIT #{startIndex,jdbcType=INTEGER}, #{pageSize,jdbcType=INTEGER};
  </select>

  <insert id="insert" parameterType="com.shangshufang.apiservice.entity.UniversityStudentExercisesEntity">
    INSERT INTO shangshufang_customer.university_student_exercises (
      student_university_code,
      student_school_id,
      student_id,
      course_university_code,
      course_school_id,
      course_id,
      course_class,
      technology_id,
      learning_phase_id,
      knowledge_id,
      exercises_document_id,
      create_user,
      update_user
    )
    VALUES (
      #{studentUniversityCode, jdbcType=INTEGER},
      #{studentSchoolID, jdbcType=INTEGER},
      #{studentID, jdbcType=INTEGER},
      #{courseUniversityCode, jdbcType=INTEGER},
      #{courseSchoolID, jdbcType=INTEGER},
      #{courseID, jdbcType=INTEGER},
      #{courseClass, jdbcType=INTEGER},
      #{technologyID, jdbcType=INTEGER},
      #{learningPhaseID, jdbcType=INTEGER},
      #{knowledgeID, jdbcType=INTEGER},
      #{exercisesDocumentID, jdbcType=INTEGER},
      #{createUser, jdbcType=VARCHAR},
      #{updateUser, jdbcType=VARCHAR}
    )
  </insert>
  <update id="update" parameterType="com.shangshufang.apiservice.entity.UniversityStudentExercisesEntity">
    UPDATE shangshufang_customer.university_student_exercises SET
      source_code_git_url = #{sourceCodeGitUrl,jdbcType=VARCHAR},
      data_status = 'W',
      update_user = #{updateUser,jdbcType=VARCHAR}
    WHERE course_university_code = #{courseUniversityCode,jdbcType=INTEGER}
    AND course_school_id = #{courseSchoolID,jdbcType=INTEGER}
    AND course_id = #{courseID,jdbcType=INTEGER}
    AND course_class = #{courseClass,jdbcType=INTEGER}
    AND student_exercises_id = #{studentExercisesID,jdbcType=INTEGER};
  </update>
  <update id="updateDataStatus" parameterType="com.shangshufang.apiservice.entity.UniversityStudentExercisesEntity">
    UPDATE shangshufang_customer.university_student_exercises SET
      data_status = #{dataStatus,jdbcType=VARCHAR},
      update_user = #{updateUser,jdbcType=VARCHAR}
    WHERE course_university_code = #{courseUniversityCode,jdbcType=INTEGER}
    AND course_school_id = #{courseSchoolID,jdbcType=INTEGER}
    AND course_id = #{courseID,jdbcType=INTEGER}
    AND course_class = #{courseClass,jdbcType=INTEGER}
    AND student_exercises_id = #{studentExercisesID,jdbcType=INTEGER};
  </update>
</mapper>