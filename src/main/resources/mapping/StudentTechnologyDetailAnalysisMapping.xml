<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.shangshufang.apiservice.mapper.StudentTechnologyDetailAnalysisMapper" >
  <parameterMap id="StudentKnowledgeAnalysisMap" type="java.util.Map">
    <parameter property="f_student_university_code" jdbcType="INTEGER" mode="IN"/>
    <parameter property="f_student_school_id" jdbcType="INTEGER" mode="IN"/>
    <parameter property="f_student_id" jdbcType="INTEGER" mode="IN"/>
    <parameter property="f_technology_id" jdbcType="INTEGER" mode="IN"/>
    <parameter property="f_technology_knowledge_count" jdbcType="INTEGER" mode="OUT"/>
    <parameter property="f_no_learning_knowledge_count" jdbcType="INTEGER" mode="OUT"/>
    <parameter property="f_weakness_knowledge_count" jdbcType="INTEGER" mode="OUT"/>
    <parameter property="f_grasp_knowledge_count" jdbcType="INTEGER" mode="OUT"/>
  </parameterMap>
  <resultMap id="StudentExerciseAnalysisMap" type="com.shangshufang.apiservice.entity.StudentExerciseAnalysisEntity" >
    <result column="months" property="months" jdbcType="VARCHAR" />
    <result column="assign_total_count" property="assignTotalCount" jdbcType="INTEGER" />
    <result column="finish_total_count" property="finishTotalCount" jdbcType="INTEGER" />
    <result column="once_compilation_success_total_count" property="onceCompilationSuccessTotalCount" jdbcType="INTEGER" />
    <result column="once_run_correct_total_count" property="onceRunCorrectTotalCount" jdbcType="INTEGER" />
  </resultMap>
  <resultMap id="StudentExercisePercentAnalysisMap" type="com.shangshufang.apiservice.entity.StudentExercisePercentAnalysisEntity" >
    <result column="months" property="months" jdbcType="VARCHAR" />
    <result column="finish_percent" property="finishPercent" jdbcType="INTEGER" />
    <result column="once_compilation_success_percent" property="onceCompilationSuccessPercent" jdbcType="INTEGER" />
    <result column="once_run_correct_percent" property="onceRunCorrectPercent" jdbcType="INTEGER" />
  </resultMap>

  <select id="searchKnowledgeAnalysisInfo" parameterMap="StudentKnowledgeAnalysisMap" statementType="CALLABLE">
    CALL shangshufang_customer.pro_create_knowledge_analysis(
    #{f_student_university_code, mode=IN},
    #{f_student_school_id, mode=IN},
    #{f_student_id, mode=IN},
    #{f_technology_id, mode=IN},
    #{f_technology_knowledge_count, mode=OUT, jdbcType=INTEGER},
    #{f_no_learning_knowledge_count, mode=OUT, jdbcType=INTEGER},
    #{f_weakness_knowledge_count, mode=OUT, jdbcType=INTEGER},
    #{f_grasp_knowledge_count, mode=OUT, jdbcType=INTEGER});
  </select>

  <select id="searchExerciseAnalysisResult" resultMap="StudentExerciseAnalysisMap">
    SELECT A.months,
           A.total_count AS assign_total_count,
           IFNULL(B.total_count, 0) AS finish_total_count,
           IFNULL(C.total_count, 0) AS once_compilation_success_total_count,
           IFNULL(D.total_count, 0) AS once_run_correct_total_count
    FROM
    (
        SELECT DATE_FORMAT(create_time,'%Y-%m') months,
           COUNT(1) total_count
        FROM shangshufang_customer.university_student_exercises
        WHERE student_university_code = #{arg0,jdbcType=INTEGER}
          AND student_school_id = #{arg1,jdbcType=INTEGER}
          AND student_id = #{arg2,jdbcType=INTEGER}
          AND technology_id = #{arg3,jdbcType=INTEGER}
        GROUP BY months
    ) A
    LEFT JOIN
    (
        SELECT DATE_FORMAT(create_time,'%Y-%m') months,
               COUNT(1) total_count
        FROM shangshufang_customer.university_student_exercises
        WHERE student_university_code = #{arg0,jdbcType=INTEGER}
          AND student_school_id = #{arg1,jdbcType=INTEGER}
          AND student_id = #{arg2,jdbcType=INTEGER}
          AND technology_id = #{arg3,jdbcType=INTEGER}
          AND data_status = 'S'
        GROUP BY months
    ) B
    ON A.months = B.months
    LEFT JOIN
    (
        SELECT DATE_FORMAT(U.create_time,'%Y-%m') months,
               COUNT(U.student_exercises_id) total_count
        FROM
        (
            SELECT A.create_time,
                   A.student_exercises_id
            FROM shangshufang_customer.university_student_exercises A
            LEFT JOIN shangshufang_customer.university_student_exercises_review B
            ON A.student_exercises_id = B.student_exercises_id
            WHERE A.student_university_code = #{arg0,jdbcType=INTEGER}
              AND A.student_school_id = #{arg1,jdbcType=INTEGER}
              AND A.student_id = #{arg2,jdbcType=INTEGER}
              AND A.technology_id = #{arg3,jdbcType=INTEGER}
              AND A.data_status != 'P'
            GROUP BY A.student_exercises_id
            HAVING MIN(B.compilation_result) = 'S'
        ) U
        GROUP BY months
    ) C
    ON A.months = C.months
    LEFT JOIN
    (
        SELECT DATE_FORMAT(U.create_time,'%Y-%m') months,
               COUNT(U.student_exercises_id) total_count
        FROM
        (
            SELECT A.create_time,
                   A.student_exercises_id
            FROM shangshufang_customer.university_student_exercises A
            LEFT JOIN shangshufang_customer.university_student_exercises_review B
            ON A.student_exercises_id = B.student_exercises_id
            WHERE A.student_university_code = #{arg0,jdbcType=INTEGER}
              AND A.student_school_id = #{arg1,jdbcType=INTEGER}
              AND A.student_id = #{arg2,jdbcType=INTEGER}
              AND A.technology_id = #{arg3,jdbcType=INTEGER}
              AND A.data_status != 'P'
            GROUP BY A.student_exercises_id
            HAVING MIN(B.run_result) = 'S'
        ) U
        GROUP BY months
    ) D
    ON A.months = D.months;
  </select>

  <select id="searchExercisePercentAnalysisResult" resultMap="StudentExercisePercentAnalysisMap">
    SELECT A.months,
        FORMAT(IFNULL(B.total_count, 0) / A.total_count * 100, 2) AS finish_percent,
        FORMAT(IFNULL(C.total_count, 0) / A.total_count * 100, 2) AS once_compilation_success_percent,
        FORMAT(IFNULL(D.total_count, 0) / A.total_count * 100, 2) AS once_run_correct_percent
    FROM
    (
        SELECT DATE_FORMAT(create_time,'%Y-%m') months,
           COUNT(1) total_count
        FROM shangshufang_customer.university_student_exercises
        WHERE student_university_code = #{arg0,jdbcType=INTEGER}
          AND student_school_id = #{arg1,jdbcType=INTEGER}
          AND student_id = #{arg2,jdbcType=INTEGER}
          AND technology_id = #{arg3,jdbcType=INTEGER}
        GROUP BY months
    ) A
    LEFT JOIN
    (
        SELECT DATE_FORMAT(create_time,'%Y-%m') months,
               COUNT(1) total_count
        FROM shangshufang_customer.university_student_exercises
        WHERE student_university_code = #{arg0,jdbcType=INTEGER}
          AND student_school_id = #{arg1,jdbcType=INTEGER}
          AND student_id = #{arg2,jdbcType=INTEGER}
          AND technology_id = #{arg3,jdbcType=INTEGER}
          AND data_status = 'S'
        GROUP BY months
    ) B
    ON A.months = B.months
    LEFT JOIN
    (
        SELECT DATE_FORMAT(U.create_time,'%Y-%m') months,
               COUNT(U.student_exercises_id) total_count
        FROM
        (
            SELECT A.create_time,
                   A.student_exercises_id
            FROM shangshufang_customer.university_student_exercises A
            LEFT JOIN shangshufang_customer.university_student_exercises_review B
            ON A.student_exercises_id = B.student_exercises_id
            WHERE A.student_university_code = #{arg0,jdbcType=INTEGER}
              AND A.student_school_id = #{arg1,jdbcType=INTEGER}
              AND A.student_id = #{arg2,jdbcType=INTEGER}
              AND A.technology_id = #{arg3,jdbcType=INTEGER}
              AND A.data_status != 'P'
            GROUP BY A.student_exercises_id
            HAVING MIN(B.compilation_result) = 'S'
        ) U
        GROUP BY months
    ) C
    ON A.months = C.months
    LEFT JOIN
    (
        SELECT DATE_FORMAT(U.create_time,'%Y-%m') months,
               COUNT(U.student_exercises_id) total_count
        FROM
        (
            SELECT A.create_time,
                   A.student_exercises_id
            FROM shangshufang_customer.university_student_exercises A
            LEFT JOIN shangshufang_customer.university_student_exercises_review B
            ON A.student_exercises_id = B.student_exercises_id
            WHERE A.student_university_code = #{arg0,jdbcType=INTEGER}
              AND A.student_school_id = #{arg1,jdbcType=INTEGER}
              AND A.student_id = #{arg2,jdbcType=INTEGER}
              AND A.technology_id = #{arg3,jdbcType=INTEGER}
              AND A.data_status != 'P'
            GROUP BY A.student_exercises_id
            HAVING MIN(B.run_result) = 'S'
        ) U
        GROUP BY months
    ) D
    ON A.months = D.months;
  </select>

</mapper>